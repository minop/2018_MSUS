<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<!-- ROLES -->
	<role>
		<id>player</id>
		<name>hrac</name>
	</role>
	<role>
		<id>game</id>
		<name>hra</name>
	</role>
	<!-- DATA -->
	<data type="number">
		<id>playerStr</id>
		<title>pStrength</title>
	</data>
	<data type="number">
		<id>playerDex</id>
		<title>pDexterity</title>
	</data>
	<data type="number">
		<id>playerDef</id>
		<title>pDefence</title>
	</data>
	<data type="number">
		<id>playerHp</id>
		<title>pHP</title>
	</data>

	<data type="number">
		<id>monsterId</id>
		<title>monster</title>
	</data>
	<data type="number">
		<id>monsterHealth</id>
		<title>monsterHP</title>
	</data>
	<data type="number">
		<id>monsterAttackBase</id>
		<title>mAttackBase</title>
	</data>
	<data type="number">
		<id>monsterAttackRoll</id>
		<title>mAttackRoll</title>
	</data>
	<data type="number">
		<id>monsterDefenceBase</id>
		<title>mDefenceBase</title>
	</data>
	<data type="number">
		<id>monsterDefenceRoll</id>
		<title>mDefenceRoll</title>
	</data>

	<data type="text">
		<id>playerId</id>
		<title></title>
	</data>
	<data type="text">
		<id>callbackId</id>
		<title></title>
	</data>
	<data type="text">
		<id>callbackTransition</id>
		<title></title>
	</data>

	<data type="text">
		<id>debugText</id>
		<title>Combat Report</title>
		<values>area</values>
	</data>

	<data type="number">
		<id>1000</id>
		<title>weightContinue</title>
		<init>1</init>
	</data>
	<data type="number">
		<id>1001</id>
		<title>weightDefeat</title>
		<init>0</init>
	</data>
	<data type="number">
		<id>1002</id>
		<title>weightVictory</title>
		<init>0</init>
	</data>
	<!-- TRANSITIONS -->
	<transition>
		<id>1</id>
		<x>209</x>
		<y>282</y>
		<label>Constructor [Game]</label>
		<roleRef>
			<id>game</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>1</id>
			<dataRef>
				<id>playerId</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>callbackId</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>callbackTransition</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>playerStr</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>playerDex</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>playerDef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>playerHp</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterId</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterHealth</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterAttackBase</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterAttackRoll</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterDefenceBase</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterDefenceRoll</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>debugText</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>1</id>
			<!-- Load player stats and choose the monster -->
			<actions phase="pre">
				<action>
					pStr : f.playerStr,
					pDef : f.playerDef,
					pDex : f.playerDex,
					pHp : f.playerHp,
					mId : f.monsterId,
					mHp : f.monsterHealth,
					mAB : f.monsterAttackBase,
					mAR : f.monsterAttackRoll,
					mDB : f.monsterDefenceBase,
					mDR : f.monsterDefenceRoll,
					pId : f.playerId,
					msg : f.debugText;

					// get player stats

					def playerTask = findTask({it.title.defaultValue.eq("Stav").and(it.caseId.eq(pId.value))});

					def playerData = getData(playerTask);

					change pStr value {
					return playerData.get("str").value;
					}

					change pDef value {
					return playerData.get("defence").value;
					}

					change pDex value {
					return playerData.get("dex").value;
					}

					change pHp value {
					return playerData.get("hp").value;
					}

					// get monster stats
					Random rng = new Random();
					change mId value {
					return rng.nextInt(10);
					}

					// &lt; je mensie ako escapenute pre XML
					if(mId.value &lt; 9) {
					// giant rat
					change mHp value {
					return 10;
					}
					change mAB value {
					return 0;
					}
					change mAR value {
					return 3;
					}
					change mDB value {
					return 2;
					}
					change mDR value {
					return 3;
					}
					change msg value {
						return "You are fighting a giant rat!"
					}
					}
					else {
					// giant spider
					change mHp value {
					return 20;
					}
					change mAB value {
					return 2;
					}
					change mAR value {
					return 6;
					}
					change mDB value {
					return 4;
					}
					change mDR value {
					return 6;
					}
					change msg value {
					return "You are fighting a giant spider!"
					}
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>6</id>
		<x>211</x>
		<y>102</y>
		<label>Combat report</label>
		<roleRef>
			<id>player</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>game</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>1</id>
			<dataRef>
				<id>playerStr</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>playerDex</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>playerDef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>playerHp</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>2</id>
			<dataRef>
				<id>monsterId</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterHealth</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterAttackBase</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterAttackRoll</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterDefenceBase</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterDefenceRoll</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>3</id>
			<dataRef>
				<id>playerId</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>callbackId</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>callbackTransition</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>4</id>
			<dataRef>
				<id>debugText</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>5</id>
			<dataRef>
				<id>1000</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>1001</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>1002</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>10</id>
		<x>404</x>
		<y>163</y>
		<label>Attack</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>player</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>1</id>
			<dataRef>
				<id>playerHp</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>2</id>
			<dataRef>
				<id>playerStr</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>playerDex</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>3</id>
			<dataRef>
				<id>monsterHealth</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterDefenceBase</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterDefenceRoll</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterAttackBase</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>monsterAttackRoll</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>4</id>
			<dataRef>
				<id>1000</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>1001</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>1002</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>1</id>
			<actions phase="pre">
				<action>
					pStr : f.playerStr,
					pDex : f.playerDex,
					pHp : f.playerHp,
					pId : f.playerId,
					mHp : f.monsterHealth,
					mAB : f.monsterAttackBase,
					mAR : f.monsterAttackRoll,
					mDB : f.monsterDefenceBase,
					mDR : f.monsterDefenceRoll,
					continueWeight : f.1000,
					victoryWeight : f.1002,
					defeatWeight : f.1001,
					debug : f.debugText;

					// player attacks
					Random RNG = new Random();

					def attackRoll = pStr.value + RNG.nextInt(6) + 1;
					def defenceRoll = mDB.value + RNG.nextInt((int)mDR.value) + 1;

					if(defenceRoll &lt; attackRoll) {
						// hit
						change mHp value {
							return mHp.value - (attackRoll - defenceRoll);
						}
					}

					// monster attacks (only if it still lives)
					if(mHp.value &gt; 0) {
						attackRoll = mAB.value + RNG.nextInt((int)mAR.value) + 1;
						defenceRoll = pDex.value + RNG.nextInt(6) + 1;

						if(defenceRoll &lt; attackRoll) {
							// hit
							change pHp value {
								return pHp.value - (attackRoll - defenceRoll);
							}
						}

						change debug value {
							return debug.value += "\nMonster attacks";
						}


						// change player hp
						def calledTask = findTask({it.title.defaultValue.eq("Stav").and(it.caseId.eq(pId.value))});
						calledTask = assignTask(calledTask);

						setData(calledTask, [
							"hp": [
								"value" : pHp.value,
								"type" : "number"
							]
						]);

						finishTask(calledTask);

						// has the player died?
						if(pHp.value &lt;= 0) {
							// death
							change continueWeight value {
								return 0;
							}
							change defeatWeight value {
								return 1;
							}
							change debug value {
								return debug.value += "\nPlayer died";
							}
						}
					}
					else {
						// victory
						change continueWeight value {
							return 0;
						}
						change victoryWeight value {
							return 1;
						}
						change debug value {
							return debug.value += "\nPlayer won";
						}
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>11</id>
		<x>574</x>
		<y>304</y>
		<label>Run away</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>player</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="finish">
			<id>1</id>
			<actions phase="pre">
				<action>
					pId : f.playerId;

					def playerTask = findTask({it.title.defaultValue.eq("Stav").and(it.caseId.eq(pId.value))});
					playerTask = assignTask(playerTask);
					def playerData = getData(playerTask);
					finishTask(playerTask);

					def mapTask = findTask({it.title.defaultValue.eq("Return to town [Game]").and(it.caseId.eq(playerData.get("mapId").value))});
					mapTask = assignTask(mapTask);
					finishTask(mapTask);
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>22</id>
		<x>570</x>
		<y>48</y>
		<label>Victory</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>player</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="finish">
			<id>1</id>
			<actions phase="pre">
				<action>
					dungId : f.callbackId,
					transId : f.callbackTransition;

					// call the specified task
					def calledTask = findTask({it.title.defaultValue.eq(transId.value).and(it.caseId.eq(dungId.value))});
					calledTask = assignTask(calledTask);
					finishTask(calledTask);
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>25</id>
		<x>695</x>
		<y>161</y>
		<label>Death</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>player</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<!-- by design everything is already disabled, so we don't do anything -->
	</transition>
	<!-- PLACES -->
	<place>
		<id>2</id>
		<x>116</x>
		<y>281</y>
		<label></label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>4</id>
		<x>407</x>
		<y>286</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>7</id>
		<x>208</x>
		<y>192</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>20</id>
		<x>413</x>
		<y>48</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>24</id>
		<x>560</x>
		<y>164</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>3</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>1</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>5</id>
		<type>regular</type>
		<sourceId>1</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>8</id>
		<type>regular</type>
		<sourceId>1</sourceId>
		<destinationId>7</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>9</id>
		<type>read</type>
		<sourceId>7</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>13</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>10</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>14</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>11</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>23</id>
		<type>regular</type>
		<sourceId>20</sourceId>
		<destinationId>22</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>26</id>
		<type>regular</type>
		<sourceId>10</sourceId>
		<destinationId>24</destinationId>
		<multiplicity>1001</multiplicity>
	</arc>
	<arc>
		<id>27</id>
		<type>regular</type>
		<sourceId>24</sourceId>
		<destinationId>25</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>28</id>
		<type>regular</type>
		<sourceId>10</sourceId>
		<destinationId>20</destinationId>
		<multiplicity>1002</multiplicity>
	</arc>
	<arc>
		<id>29</id>
		<type>regular</type>
		<sourceId>10</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1000</multiplicity>
		<breakPoint><x>381</x><y>230</y></breakPoint>
	</arc>
	<arc>
		<id>30</id>
		<type>reset</type>
		<sourceId>20</sourceId>
		<destinationId>22</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>486</x><y>21</y></breakPoint>
	</arc>
	<arc>
		<id>31</id>
		<type>reset</type>
		<sourceId>24</sourceId>
		<destinationId>25</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>618</x><y>136</y></breakPoint>
	</arc>
	<arc>
		<id>32</id>
		<type>reset</type>
		<sourceId>4</sourceId>
		<destinationId>11</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>485</x><y>274</y></breakPoint>
	</arc>
	<arc>
		<id>33</id>
		<type>reset</type>
		<sourceId>24</sourceId>
		<destinationId>11</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>34</id>
		<type>reset</type>
		<sourceId>20</sourceId>
		<destinationId>11</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>35</id>
		<type>reset</type>
		<sourceId>4</sourceId>
		<destinationId>25</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>36</id>
		<type>reset</type>
		<sourceId>4</sourceId>
		<destinationId>22</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>37</id>
		<type>reset</type>
		<sourceId>20</sourceId>
		<destinationId>25</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>604</x><y>107</y></breakPoint>
	</arc>
	<arc>
		<id>38</id>
		<type>reset</type>
		<sourceId>24</sourceId>
		<destinationId>22</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>39</id>
		<type>regular</type>
		<sourceId>7</sourceId>
		<destinationId>22</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>40</id>
		<type>regular</type>
		<sourceId>7</sourceId>
		<destinationId>25</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>486</x><y>108</y></breakPoint>
	</arc>
	<arc>
		<id>41</id>
		<type>regular</type>
		<sourceId>7</sourceId>
		<destinationId>11</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>482</x><y>224</y></breakPoint>
	</arc>
</document>